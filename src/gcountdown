#!/usr/bin/env python

import os
import sys
import time
import datetime
import pygtk
pygtk.require('2.0')
import gtk
import gtk.glade
import gobject
import pynotify

class TimerSetter():
	def __init__(self):
		self.bin_path = os.path.dirname(sys.argv[0])
		self.gladefile = os.path.join(self.bin_path, 'gcountdown.glade')

		self.wtree = gtk.glade.XML(self.gladefile)
		self.window = self.wtree.get_widget("window_main")
		self.window.connect("destroy", self.on_window_main_destroy)
		sighandlers = {
			'on_button_apply_clicked': self.on_button_apply_clicked,
			'on_button_cancel_clicked': self.on_button_cancel_clicked,
		}
		self.wtree.signal_autoconnect(sighandlers)

	def run(self):
		self.alert = None
		self.window.show()
		gtk.main()
		self.window.hide()
		return(self.alert)

	def on_window_main_destroy(self, *args):
		gtk.main_quit()

	def on_button_apply_clicked(self, *args):
		now = datetime.datetime.now()
		self.alert = now + datetime.timedelta(
			hours = self.wtree.get_widget("spinbutton_hours").get_value_as_int(),
			minutes = self.wtree.get_widget("spinbutton_mins").get_value_as_int(),
			seconds = self.wtree.get_widget("spinbutton_secs").get_value_as_int()
		)
		gtk.main_quit()

	def on_button_cancel_clicked(self, *args):
		gtk.main_quit()

class Timer:
	def __init__(self):
		self.icon_path = os.path.dirname(sys.argv[0])
		self.icon_idle = os.path.join(self.icon_path, 'idle.png')
		self.icon_running = os.path.join(self.icon_path, 'running.png')
		self.icon_alarm = os.path.join(self.icon_path, 'alarm.png')
		self.tick_interval = 1
		self.alert_time = None # When to alert
		self.alerted = False # Have we already alerted for the current alert?
		self.editing = False # Are we editing an alert (don't open new edit window)

		self.icon = gtk.status_icon_new_from_file(self.icon_idle)
		self.icon.connect('activate',self.icon_click)
		self.icon.set_visible(True)

		self.alert_reset()

	def alert_reset(self):
		self.icon.set_from_file(self.icon_idle)
		self.alert_time = None
		self.alerted = False
		self.icon.set_tooltip("Idle")

	def alert_set(self, alert_time):
		if alert_time:
			self.icon.set_from_file(self.icon_running)
			self.alert_time = alert_time
		else:
			self.alert_reset()

	def icon_click(self,dummy):
		if self.alerted:
			self.alert_reset()
		else:
			if not self.editing:
				self.editing = True
				w = TimerSetter()
				self.alert_set(w.run())
				self.editing = False

	def delta_frac(self, delta):
		delta_mins, delta_secs = divmod(delta.seconds, 60)
		delta_hours, delta_mins = divmod(delta_mins, 60)
		return( {'hours': delta_hours, 'mins': delta_mins, 'secs': delta_secs} )

	def update(self):
		now = datetime.datetime.now()
		if self.alert_time:
			if now >= self.alert_time:
				# Show elapsed time since alert in tooltip
				d = self.delta_frac(now - self.alert_time)
				self.icon.set_tooltip(
					"Timer ran out %i hours, %i minutes and %i seconds ago" % (
						d['hours'], d['mins'], d['secs'])
				)

				# Sound the alarm if we haven't done so yet
				if not self.alerted:
					# Change icon
					self.icon.set_from_file(self.icon_alarm)
					self.icon.set_tooltip("Timer ran out")

					# Show notification
					pynotify.init('Timer')
					notifier = pynotify.Notification('Timer ran out')
					notifier.set_urgency(pynotify.URGENCY_CRITICAL)
					notifier.set_hint('x', self.icon.get_geometry()[1].x)
					notifier.set_hint('y', self.icon.get_geometry()[1].x)
					notifier.set_timeout(5)
					notifier.show()
					self.alerted = True
			else:
				# Show time left to alert in tooltip
				d = self.delta_frac(self.alert_time - now)
				self.icon.set_tooltip("Alerting in %i hours, %i minutes, %i seconds" % (
					d['hours'], d['mins'], d['secs'])
				)

		source_id = gobject.timeout_add(self.tick_interval*1000, self.update)

	def main(self):
		gobject.timeout_add(self.tick_interval, self.update)
		gtk.main()

if __name__ == "__main__":
	app = Timer()
	app.main()
